---
apiVersion: tekton.dev/v1beta1
kind: ClusterTask
metadata:
  annotations:
    task.kubevirt.io/associatedServiceAccount: {{ sa_name }}
{% if task_name == "create-vm-from-manifest" %}
    manifest.params.task.kubevirt.io/type: {{ task_param_types.resource_yaml }}
    manifest.params.task.kubevirt.io/kind: {{ task_param_types.vm_kind}}
    manifest.params.task.kubevirt.io/apiVersion: {{ task_param_types.vm_version }}
    namespace.params.task.kubevirt.io/type: {{ task_param_types.namespace }}
{% elif task_name == "create-vm-from-template" %}
    templateName.params.task.kubevirt.io/type: {{ task_param_types.vm_template_name }}
    templateName.params.task.kubevirt.io/kind: {{ task_param_types.template_kind }}
    templateName.params.task.kubevirt.io/apiVersion: {{ task_param_types.template_version }}
    templateNamespace.params.task.kubevirt.io/type: {{ task_param_types.namespace }}
    templateParams.params.task.kubevirt.io/type: {{ task_param_types.template_params_array }}
    vmNamespace.params.task.kubevirt.io/type: {{ task_param_types.namespace }}
{% endif %}
    dataVolumes.params.task.kubevirt.io/kind: {{ task_param_types.datavolume_kind }}
    dataVolumes.params.task.kubevirt.io/apiVersion: {{ task_param_types.cdi_beta_api_version }}
    ownDataVolumes.params.task.kubevirt.io/kind: {{ task_param_types.datavolume_kind }}
    ownDataVolumes.params.task.kubevirt.io/apiVersion: {{ task_param_types.cdi_beta_api_version }}
    persistentVolumeClaims.params.task.kubevirt.io/kind: {{ task_param_types.pvc_kind }}
    persistentVolumeClaims.params.task.kubevirt.io/apiVersion: {{ task_param_types.v1_version }}
    ownPersistentVolumeClaims.params.task.kubevirt.io/kind: {{ task_param_types.pvc_kind }}
    ownPersistentVolumeClaims.params.task.kubevirt.io/apiVersion: {{ task_param_types.v1_version }}
    startVM.params.task.kubevirt.io/type: {{ task_param_types.boolean }}
  labels:
    task.kubevirt.io/type: {{ task_name }}
    task.kubevirt.io/category: {{ task_category }}
  name: {{ task_name }}
spec:
  params:
{% if task_name == "create-vm-from-manifest" %}
    - name: manifest
      description: YAML manifest of a VirtualMachine resource to be created.
      type: string
    - name: namespace
      description: Namespace where to create the VM. (defaults to manifest namespace or active namespace)
      default: ""
      type: string
{% elif task_name == "create-vm-from-template" %}
    - name: templateName
      description: Name of an OKD template to create VM from.
      type: string
    - name: templateNamespace
      description: Namespace of an OKD template to create VM from. (defaults to active namespace)
      default: ""
      type: string
    - name: templateParams
      description: Template params to pass when processing the template manifest. Each param should have KEY:VAL format. Eg ["NAME:my-vm", "DESC:blue"]
      default: []
      type: array
    - name: vmNamespace
      description: Namespace where to create the VM. (defaults to active namespace)
      default: ""
      type: string
{% endif %}
    - name: startVM
      description: Set to true or false to start / not start vm after creation.
      default: ""
      type: string
    - name: dataVolumes
      description: Add DVs to VM Volumes. Replaces a particular volume if in VOLUME_NAME:DV_NAME format. Eg. ["rootdisk:my-dv", "my-dv2"]
      default: []
      type: array
    - name: ownDataVolumes
      description: Add DVs to VM Volumes and add VM to DV ownerReferences. These DataVolumes will be deleted once the created VM gets deleted. Replaces a particular volume if in VOLUME_NAME:DV_NAME format. Eg. ["rootdisk:my-dv", "my-dv2"]
      default: []
      type: array
    - name: persistentVolumeClaims
      description: Add PVCs to VM Volumes. Replaces a particular volume if in VOLUME_NAME:PVC_NAME format. Eg. ["rootdisk:my-pvc", "my-pvc2"]
      default: []
      type: array
    - name: ownPersistentVolumeClaims
      description: Add PVCs to VM Volumes and add VM to PVC ownerReferences. These PVCs will be deleted once the created VM gets deleted. Replaces a particular volume if in VOLUME_NAME:PVC_NAME format. Eg. ["rootdisk:my-pvc", "my-pvc2"]
      default: []
      type: array
  results:
    - name: name
      description: The name of a VM that was created.
    - name: namespace
      description: The namespace of a VM that was created.
  steps:
    - name: createvm
      image: "{{ main_image }}:{{ version }}"
      command:
        - create-vm
      args:
        - "--output=yaml"
        - '--dvs'
        - $(params.dataVolumes)
        - '--own-dvs'
        - $(params.ownDataVolumes)
        - '--pvcs'
        - $(params.persistentVolumeClaims)
        - '--own-pvcs'
        - $(params.ownPersistentVolumeClaims)
{% if task_name == "create-vm-from-template" %}
        - '--template-params'
        - $(params.templateParams)
      env:
        - name: TEMPLATE_NAME
          value: $(params.templateName)
        - name: TEMPLATE_NAMESPACE
          value: $(params.templateNamespace)
        - name: VM_NAMESPACE
          value: $(params.vmNamespace)
{% elif task_name == "create-vm-from-manifest" %}
      env:
        - name: VM_MANIFEST
          value: $(params.manifest)
        - name: VM_NAMESPACE
          value: $(params.namespace)
{% endif %}
        - name: START_VM
          value: $(params.startVM)
