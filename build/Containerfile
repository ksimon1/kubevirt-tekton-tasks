ARG BUILD_ARCH=amd64
FROM --platform=linux/${BUILD_ARCH} quay.io/centos/centos:stream9 AS taskBuilder
ARG TARGETARCH

RUN dnf install -y tar gzip && dnf clean all

ENV TARGETARCH=${TARGETARCH:-amd64}
ENV GO_VERSION="1.23.8"
RUN export ARCH=$(uname -m | sed 's/x86_64/amd64/'); curl -L https://go.dev/dl/go${GO_VERSION}.linux-${ARCH}.tar.gz | tar -C /usr/local -xzf -
ENV PATH=$PATH:/usr/local/go/bin

COPY . /src
WORKDIR /src
RUN mkdir /out

RUN task_names=("create-vm" "execute-in-vm" "generate-ssh-keys" "modify-data-object" "wait-for-vmi-status"); \
    for TASK_NAME in ${task_names[@]}; do \
        echo "compiling $TASK_NAME"; \
        CGO_ENABLED=0 GOOS=linux GOARCH=${TARGETARCH} go build -mod=vendor -o /out/${TASK_NAME} ./cmd/${TASK_NAME} || exit 1; \
    done
RUN CGO_ENABLED=0 GOOS=linux GOARCH=${TARGETARCH} GODEBUG=http2client=0 go build -mod=vendor -o /out/disk-uploader ./cmd/disk-uploader

FROM --platform=linux/${TARGETARCH} quay.io/centos/centos:stream9
ENV USER_UID=1001 \
    USER_NAME=tekton-tasks \
    HOME=/home/${USER_NAME}

RUN dnf install -y xorriso openssh-clients nbdkit nbdkit-curl-plugin qemu-img && dnf clean all

# install task binaries
COPY --from=taskBuilder /out/. /usr/local/bin/
COPY build/bin /usr/local/bin

USER 0
RUN  /usr/local/bin/user_setup

ENTRYPOINT ["/usr/local/bin/entrypoint"]
CMD ["--help"]

USER ${USER_UID}
